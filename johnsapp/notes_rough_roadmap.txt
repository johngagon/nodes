Start with basic crud, then go bigger (like done with groovy accounting)

https://react-jsonschema-form.readthedocs.io/en/latest/

x 1. create react app
(you may need to follow the uninstall directions)
https://create-react-app.dev/docs/getting-started

  npx create-react-app johnsapp
  cd johnsapp
  npm start
* open http://localhost:3000 
* test then stop the server



x 2. install the forms
https://react-jsonschema-form.readthedocs.io/en/latest/
npm install react-jsonschema-form --save
(backup) and empty out App.js, replace with the sample 
-----------------------------
import React from "react";
import Form from 'react-jsonschema-form'; //Note: not import Form from "@rjsf/core";
const schema = {
  title: "Todo",
  type: "object",
  required: ["title"],
  properties: {
    title: {type: "string", title: "Title", default: "A new task"},
    done: {type: "boolean", title: "Done?", default: false}
  }
};
const log = (type) => console.log.bind(console, type);
class App extends React.Component {
  render() {
    return (
        <Form schema={schema}
        onChange={log("changed")}
        onSubmit={log("submitted")}
        onError={log("errors")} />
    )
  }
}
export default App;

x 3. create the json schema     (start with simple stuff, then work up to bigger)
  externalize from the sample.
  the schema variable should not be in the json file. it should have the { "title":"title", ... } in it. 
  import it this way: 
    //assuming you use to do structure from rjsf.
    import schema from './todo-schema.json';

x 4. install React Router and make a simple menu with it.

npm install --save react-router-dom

x 5. customize the forms page. move the form to another js file.  (ToDoForm.js) JSX?

x 6. customize the app component to work as a parent (for state) (start using crud tutorial and some sample data that complies)
x 7. create a listing page generically off the json-schema using double key concept
8. create generic state management (one flux action, dispatcher and store chain)
  have onSubmit actually update the data.
  x add a create with empty link
  have done do readOnly.

9. using the same json-schema, create a simple api and document store. (update to database as needed).
  https://medium.com/@devmrin/create-a-rest-api-json-server-in-less-than-1-minute-acf286600f03

  https://apidevtools.org/json-schema-ref-parser/docs/ref-parser.html#refs


npm install --save json-schema-ref-parser


Other custom things:

https://react.rocks/tag/Form?show=40


10. have actions and stores do transactions and loads respectively and test it.

look at readonly dynamic table (bootstrap?)

look at edit grids(excel imports substitute), calendars, etc
copy some code





--------------------------------------------------------------------
Notes from js2pg:
createdb

validate json
execute ddl
convert inserts
execute inserts

1) install json-schema and teh test suite (draft 04?)
2) add json-schemas to a directory - multiple files: reusable, single file: easiest.
3) translate the schema to DDL statements, utilize best practices to parse.
4) execute and test a variety of json-schemas.

existing reverse: DDL to JSON Schema:
http://www.npmjs.com/package/sql-ddl-to-json-schema

mongo version (to and from converters, check for existing tool on this of course)

title, type, properties

column type: string, number, boolean
non-specific type: null
table type: low level object

parent objects: children objects FK to parent so insert ref to wraping
arrays: records (99%)

http://jsonschema.Note



Notes:

SCHEMA INLINE Object or JSON:
It's less characters to type (double quotes) to have a Javascript Object than a JSON Schema file
but the JSON Schema file is easier to reuse outside of the component that way.
e.g.:

const schema = {
  title: "Todo",
  type: "object",
  required: ["title"],
  properties: {
    title: {type: "string", title: "Title", default: "A new task"},
    done: {type: "boolean", title: "Done?", default: false}
  }
};
--------------

{
  "title": "Todo",
  "type": "object",
  "required": ["title"],
  "properties": {
    "title": { "type": "string", "title": "Title", "default": "A new task" },
    "done": { "type": "boolean", "title": "Done?", "default": false }
  }
}